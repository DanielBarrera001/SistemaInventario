@page "/listaproductos"
@inject SistemaInventario.ApplicationDbContext DbContext
@using Microsoft.EntityFrameworkCore
@using SistemaInventario.Models
@rendermode InteractiveServer

<h3>Lista de Productos</h3>
<a href="/agregar-producto" class="btn btn-primary mb-3">Agregar Nuevo Producto</a>

<div class="mb-3 d-flex">
    <input type="text" id="busqueda" class="form-control me-2" @bind="terminoBusqueda"
           placeholder="Buscar por nombre o código de barras..." />
    <button class="btn btn-info" @onclick="BuscarProductos">Buscar</button>
</div>

@if (productosFiltrados == null)
{
    <p><em>Cargando productos...</em></p>
}
else if (!productosFiltrados.Any())
{
    <div class="alert alert-info">No se encontraron productos que coincidan con la búsqueda.</div>
}
else
{
    <table class="table table-bordered table-striped">
        <thead>
            <tr>
                <th>Código de Barras</th>
                <th>Nombre</th>
                <th>Descripción</th>
                <th>Precio</th>
                <th>Stock</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var producto in productosFiltrados)
            {
                <tr>
                    <td>@producto.CodigoBarras</td>
                    <td>@producto.Nombre</td>
                    <td>@producto.Descripcion</td>
                    <td>@(producto.Precio?.ToString("C") ?? "$0.00")</td>
                    <td>@producto.Stock</td>
                    <td>
                        <a href="/editar-producto/@producto.Id" class="btn btn-warning btn-sm me-2">Editar</a>
                        <button @onclick="() => EliminarProducto(producto.Id)" class="btn btn-danger btn-sm">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Producto> todosLosProductos;
    private List<Producto> productosFiltrados;
    private string terminoBusqueda = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        todosLosProductos = await DbContext.Productos.ToListAsync();
        productosFiltrados = todosLosProductos;
    }

    private void BuscarProductos()
{
    if (string.IsNullOrWhiteSpace(terminoBusqueda))
    {
        productosFiltrados = todosLosProductos;
    }
    else
    {
        productosFiltrados = todosLosProductos
            .Where(p => 
                (p.Nombre != null && p.Nombre.Contains(terminoBusqueda, StringComparison.OrdinalIgnoreCase)) ||
                (p.CodigoBarras != null && p.CodigoBarras.Contains(terminoBusqueda, StringComparison.OrdinalIgnoreCase)))
            .ToList();
    }
}

    private async Task EliminarProducto(int productoId)
    {
        var productoAEliminar = await DbContext.Productos.FindAsync(productoId);
        if (productoAEliminar != null)
        {
            DbContext.Productos.Remove(productoAEliminar);
            await DbContext.SaveChangesAsync();

            todosLosProductos.Remove(productoAEliminar);
            BuscarProductos();
        }
    }
}