@page "/"
@inject SistemaInventario.ApplicationDbContext DbContext
@using Microsoft.EntityFrameworkCore
@using SistemaInventario.Models
@using SistemaInventario.Components
@rendermode InteractiveServer

<h3>Panel de Control de Inventario</h3>
<hr />

<div class="row mb-4 text-center">
    <div class="col-md-4">
        <div class="card bg-info text-white shadow">
            <div class="card-body">
                <h4 class="card-title">Valor Total</h4>
                <p class="card-text h2">@totalValorInventario.ToString("C2")</p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card bg-success text-white shadow">
            <div class="card-body">
                <h4 class="card-title">Total de Productos</h4>
                <p class="card-text h2">@totalProductos</p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card bg-secondary text-white shadow">
            <div class="card-body">
                <h4 class="card-title">Movimientos Recientes</h4>
                <p class="card-text h2">@totalMovimientos</p>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-lg-6 mb-4">
        <div class="card h-100 shadow-sm">
            <div class="card-header bg-primary text-white">
                <h5 class="card-title mb-0">Último Producto Agregado</h5>
            </div>
            <div class="card-body">
                @if (latestProduct != null)
                {
                    <p><strong>Nombre:</strong> @latestProduct.Nombre</p>
                    <p><strong>Código de Barras:</strong> @(latestProduct.CodigoBarras ?? "N/A")</p>
                    <p><strong>Stock Inicial:</strong> @latestProduct.Stock</p>
                    <p><strong>ID de Producto:</strong> @latestProduct.Id</p>
                }
                else
                {
                    <p>No se encontraron productos en la base de datos.</p>
                }
            </div>
        </div>
    </div>

    <div class="col-lg-6 mb-4">
        <div class="card h-100 shadow-sm">
            <div class="card-header bg-warning text-dark">
                <h5 class="card-title mb-0">Productos por Agotarse</h5>
            </div>
            <div class="card-body">
                @if (lowStockProducts != null && lowStockProducts.Any())
                {
                    <table class="table table-striped table-sm mb-0">
                        <thead>
                            <tr>
                                <th>Nombre</th>
                                <th>Código</th>
                                <th>Stock</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var producto in lowStockProducts)
                            {
                                <tr>
                                    <td>@producto.Nombre</td>
                                    <td>@(producto.CodigoBarras ?? "N/A")</td>
                                    <td>@producto.Stock</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <div class="alert alert-success m-0" role="alert">
                        ¡Todos los productos tienen suficiente stock! 🎉
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-12">
        <div class="card h-100 shadow-sm">
            <div class="card-header bg-dark text-white">
                <h5 class="card-title mb-0">Últimos Movimientos</h5>
            </div>
            <div class="card-body">
                @if (latestMovements != null && latestMovements.Any())
                {
                    <table class="table table-striped table-sm mb-0">
                        <thead>
                            <tr>
                                <th>Fecha</th>
                                <th>Producto</th>
                                <th>Tipo</th>
                                <th>Cantidad</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var movimiento in latestMovements)
                            {
                                <tr class="@GetMovimientoClass(movimiento.Tipo)">
                                    <td>@movimiento.Fecha.ToString("dd/MM/yyyy HH:mm")</td>
                                    <td>@movimiento.Producto.Nombre</td>
                                    <td>@movimiento.Tipo</td>
                                    <td>@movimiento.Cantidad</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                }
                else
                {
                    <p>No se encontraron movimientos recientes.</p>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private Producto latestProduct;
    private List<Producto> lowStockProducts;
    private List<Movimiento> latestMovements;
    private int totalProductos;
    private int totalMovimientos;
    private double totalValorInventario;
    private const int lowStockThreshold = 10;
    private const int latestMovementsCount = 10;

    protected override async Task OnInitializedAsync()
    {
        // Resumen de inventario
        totalProductos = await DbContext.Productos.CountAsync();
        totalMovimientos = await DbContext.Movimientos.CountAsync();
        totalValorInventario = await DbContext.Productos.SumAsync(p => p.Stock * (p.Precio ?? 0));

        // Último producto agregado
        latestProduct = await DbContext.Productos.OrderByDescending(p => p.Id).FirstOrDefaultAsync();

        // Productos por agotarse
        lowStockProducts = await DbContext.Productos.Where(p => p.Stock <= lowStockThreshold && p.Stock > 0).OrderBy(p => p.Stock).ToListAsync();

        // Últimos movimientos
        latestMovements = await DbContext.Movimientos.Include(m => m.Producto).OrderByDescending(m => m.Fecha).Take(latestMovementsCount).ToListAsync();
    }

    private string GetMovimientoClass(TipoMovimiento tipo)
    {
        return tipo switch
        {
            TipoMovimiento.Ingreso => "table-success",
            TipoMovimiento.NuevoProducto => "table-primary",
            TipoMovimiento.Salida => "table-danger",
            _ => string.Empty
        };
    }
}