@page "/proveedores"
@inject SistemaInventario.ApplicationDbContext DbContext
@using Microsoft.EntityFrameworkCore
@using SistemaInventario.Models
@rendermode InteractiveServer

<h3>Lista de Proveedores</h3>

<div class="mb-3">
    <a href="/agregar-proveedor" class="btn btn-primary">Agregar Proveedor</a>
</div>

@if (proveedores == null)
{
    <p><em>Cargando proveedores...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Nombre</th>
                <th>Contacto</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var proveedor in proveedores)
            {
                <tr>
                    <td>@proveedor.Nombre</td>
                    <td>@proveedor.Contacto</td>
                    <td>
                        <a href="/editar-proveedor/@proveedor.Id" class="btn btn-warning btn-sm me-2">Editar</a>
                        <button @onclick="() => EliminarProveedor(proveedor.Id)" class="btn btn-danger btn-sm">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Proveedor> proveedores;

    protected override async Task OnInitializedAsync()
    {
        proveedores = await DbContext.Proveedores.ToListAsync();
    }

    private async Task EliminarProveedor(int proveedorId)
    {
        var proveedorAEliminar = await DbContext.Proveedores.FindAsync(proveedorId);
        if (proveedorAEliminar != null)
        {
            var productosAsociados = await DbContext.Productos.Where(p => p.ProveedorId == proveedorId).AnyAsync();
            if (productosAsociados)
            {
                Console.WriteLine("No se puede eliminar el proveedor. Tiene productos asociados.");
                return;
            }

            DbContext.Proveedores.Remove(proveedorAEliminar);
            await DbContext.SaveChangesAsync();

            proveedores = await DbContext.Proveedores.ToListAsync();
            StateHasChanged();
        }
    }
}