@page "/agregar-producto"
@page "/editar-producto/{ProductoId:int}"
@inject SistemaInventario.ApplicationDbContext DbContext
@inject NavigationManager Navigation
@using Microsoft.EntityFrameworkCore
@using SistemaInventario.Models
@rendermode InteractiveServer

<h3>@(esNuevoProducto ? "Agregar" : "Editar") Producto</h3>

<div class="card p-4">
    <EditForm Model="producto" OnValidSubmit="ManejarEnvio" FormName="productoForm">
        <DataAnnotationsValidator />
        <ValidationSummary />

        @if (!string.IsNullOrEmpty(mensajeError))
        {
            <div class="alert alert-danger" role="alert">
                @mensajeError
            </div>
        }

        <div class="mb-3">
            <label for="codigoBarras" class="form-label">Código de Barras</label>
            <InputText id="codigoBarras" class="form-control" @bind-Value="producto.CodigoBarras"
                       disabled="@(!esNuevoProducto)" />
        </div>
        <div class="mb-3">
            <label for="nombre" class="form-label">Nombre</label>
            <InputText id="nombre" class="form-control" @bind-Value="producto.Nombre" />
        </div>
        <div class="mb-3">
            <label for="descripcion" class="form-label">Descripción</label>
            <InputTextArea id="descripcion" class="form-control" @bind-Value="producto.Descripcion" />
        </div>
        <div class="row">
            <div class="col-md-6 mb-3">
                <label for="precio" class="form-label">Precio</label>
                <InputNumber id="precio" class="form-control" @bind-Value="producto.Precio" />
            </div>
            <div class="col-md-6 mb-3">
                <label for="stock" class="form-label">Stock</label>
                <InputNumber id="stock" class="form-control" @bind-Value="producto.Stock"
                             disabled="@(!esNuevoProducto)" />
            </div>
        </div>

        <button type="submit" class="btn btn-primary">Guardar</button>
        <a href="/listaproductos" class="btn btn-secondary">Cancelar</a>
    </EditForm>
</div>

@code {
    [Parameter]
    public int? ProductoId { get; set; }

    private Producto producto = new();
    private bool esNuevoProducto => ProductoId == null;
    private string mensajeError = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        if (!esNuevoProducto)
        {
            producto = await DbContext.Productos.FindAsync(ProductoId);
        }
    }

    private async Task ManejarEnvio()
    {
        mensajeError = string.Empty;

        if (esNuevoProducto)
        {
            var productoExistente = await DbContext.Productos.FirstOrDefaultAsync(p => p.CodigoBarras == producto.CodigoBarras);
            if (productoExistente != null)
            {
                mensajeError = "Error: Ya existe un producto con este código de barras.";
                return;
            }

            DbContext.Productos.Add(producto);
            await DbContext.SaveChangesAsync();

            // Registrar el movimiento de ingreso inicial como 'NuevoProducto'
            var nuevoMovimiento = new Movimiento
            {
                Tipo = TipoMovimiento.NuevoProducto,
                Cantidad = producto.Stock,
                Fecha = DateTime.Now,
                ProductoId = producto.Id
            };
            DbContext.Movimientos.Add(nuevoMovimiento);
        }
        else
        {
            DbContext.Productos.Update(producto);
        }

        await DbContext.SaveChangesAsync();

        Navigation.NavigateTo("/listaproductos");
    }
}